<?php

namespace frontend\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "club".
 *
 * @property int $id
 * @property string $name Название клуба
 * @property string|null $address Адресс
 * @property string|null $date_of_creation Дата создания
 * @property int|null $created_by_whom Кем создано
 * @property string|null $date_of_update Дата обновления
 * @property int|null $updated_by_whom Кем обновлено
 * @property string|null $date_of_deletion Дата удаления
 * @property int|null $deleted_by_whom Кем удалено
 *
 * @property Client[] $clients
 * @property ClubClient[] $clubClients
 * @property User $createdByWhom
 * @property User $deletedByWhom
 * @property User $updatedByWhom
 */
class Club extends \yii\db\ActiveRecord
{
    public $clubList;

    public static function getClubList()
    {
        return ArrayHelper::map(Club::find()->all(), 'id', 'name');
    }
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'club';
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->date_of_creation = date('Y-m-d H:i:s');
            $this->created_by_whom = Yii::$app->user->id;
        } else {
            $this->date_of_update = date('Y-m-d H:i:s');
            $this->updated_by_whom = Yii::$app->user->id;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        $this->date_of_deletion = date('Y-m-d H:i:s');

        $this->deleted_by_whom = Yii::$app->user->id;
        $this->save();

        return  false;
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['clubList','date_of_creation', 'date_of_update', 'date_of_deletion'], 'safe'],
            [['created_by_whom', 'updated_by_whom', 'deleted_by_whom'], 'integer'],
            [['name', 'address'], 'string', 'max' => 255],
            [['created_by_whom'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['created_by_whom' => 'id']],
            [['deleted_by_whom'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['deleted_by_whom' => 'id']],
            [['updated_by_whom'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['updated_by_whom' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'clubList' => 'clubList',
            'name' => 'Название клуба',
            'address' => 'Адресс',
            'date_of_creation' => 'Дата создания',
            'created_by_whom' => 'Кто создал',
            'date_of_update' => 'Дата обновления',
            'updated_by_whom' => 'Кто обновил',
            'date_of_deletion' => 'Дата удаления',
            'deleted_by_whom' => 'Кто удалил',
        ];
    }

    /**
     * Gets query for [[Clients]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getClients()
    {
        return $this->hasMany(Client::class, ['id' => 'client_id'])->viaTable('club_client', ['club_id' => 'id']);
    }

    /**
     * Gets query for [[ClubClients]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getClubClients()
    {
        return $this->hasMany(ClubClient::class, ['club_id' => 'id']);
    }

    /**
     * Gets query for [[CreatedByWhom]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedByWhom()
    {
        return $this->hasOne(User::class, ['id' => 'created_by_whom']);
    }

    /**
     * Gets query for [[DeletedByWhom]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getDeletedByWhom()
    {
        return $this->hasOne(User::class, ['id' => 'deleted_by_whom']);
    }

    /**
     * Gets query for [[UpdatedByWhom]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedByWhom()
    {
        return $this->hasOne(User::class, ['id' => 'updated_by_whom']);
    }
}
